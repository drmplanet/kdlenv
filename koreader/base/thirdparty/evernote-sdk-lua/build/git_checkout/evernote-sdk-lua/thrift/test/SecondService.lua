--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'thrift.Thrift'
require 'thrift.test.ttypes'

SecondServiceClient = __TObject.new(__TClient, {
  __type = 'SecondServiceClient'
})

function SecondServiceClient:blahBlah()
  self:send_blahBlah()
  self:recv_blahBlah()
end

function SecondServiceClient:send_blahBlah()
  self.oprot:writeMessageBegin('blahBlah', TMessageType.CALL, self._seqid)
  local args = blahBlah_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SecondServiceClient:recv_blahBlah()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = blahBlah_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SecondServiceClient:secondtestString(thing)
  self:send_secondtestString(thing)
  return self:recv_secondtestString(thing)
end

function SecondServiceClient:send_secondtestString(thing)
  self.oprot:writeMessageBegin('secondtestString', TMessageType.CALL, self._seqid)
  local args = secondtestString_args:new{}
  args.thing = thing
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SecondServiceClient:recv_secondtestString(thing)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = secondtestString_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
SecondServiceIface = __TObject:new{
  __type = 'SecondServiceIface'
}


SecondServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'SecondServiceProcessor'
})

function SecondServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function SecondServiceProcessor:process_blahBlah(seqid, iprot, oprot, server_ctx)
  local args = blahBlah_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = blahBlah_result:new{}
  local status, res = pcall(self.handler.blahBlah, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('blahBlah', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SecondServiceProcessor:process_secondtestString(seqid, iprot, oprot, server_ctx)
  local args = secondtestString_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = secondtestString_result:new{}
  local status, res = pcall(self.handler.secondtestString, self.handler, args.thing)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('secondtestString', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

blahBlah_args = __TObject:new{

}

function blahBlah_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function blahBlah_args:write(oprot)
  oprot:writeStructBegin('blahBlah_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

blahBlah_result = __TObject:new{

}

function blahBlah_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function blahBlah_result:write(oprot)
  oprot:writeStructBegin('blahBlah_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

secondtestString_args = __TObject:new{
  thing
}

function secondtestString_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.thing = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function secondtestString_args:write(oprot)
  oprot:writeStructBegin('secondtestString_args')
  if self.thing then
    oprot:writeFieldBegin('thing', TType.STRING, 1)
    oprot:writeString(self.thing)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

secondtestString_result = __TObject:new{
  success
}

function secondtestString_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function secondtestString_result:write(oprot)
  oprot:writeStructBegin('secondtestString_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
