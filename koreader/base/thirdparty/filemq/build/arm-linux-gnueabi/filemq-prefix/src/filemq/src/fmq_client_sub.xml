<declare type = "forward">
//  Forward declarations
typedef struct _sub_t sub_t;
</declare>
<declare>
//  Subscription in memory
struct _sub_t {
    client_t *client;           //  Pointer to parent client
    char *inbox;                //  Inbox location
    char *path;                 //  Path we subscribe to
};

static sub_t *
sub_new (client_t *client, char *inbox, char *path)
{
    sub_t *self = (sub_t *) zmalloc (sizeof (sub_t));
    self->client = client;
    self->inbox = strdup (inbox);
    self->path = strdup (path);
    return self;
}

static void
sub_destroy (sub_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        sub_t *self = *self_p;
        free (self->inbox);
        free (self->path);
        free (self);
        *self_p = NULL;
    }
}

//  Return new cache object for subscription path

static zhash_t *
sub_cache (sub_t *self)
{
    //  Get directory cache for this path
    zdir_t *dir = zdir_new ("", self->inbox);
    zhash_t *cache = dir? zdir_cache (dir): NULL;
    zdir_destroy (&dir);
    return cache;
}
</declare>
