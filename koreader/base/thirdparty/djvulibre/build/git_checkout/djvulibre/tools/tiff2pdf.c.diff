--- tiff2pdf.c.orig	2014-07-08 17:16:30.856560449 -0400
+++ tiff2pdf.c	2014-07-08 17:16:52.260561336 -0400
@@ -1,3 +1,26 @@
+/*  -*- C -*-
+//C- -------------------------------------------------------------------
+//C- DjView4
+//C- Copyright (c) 2006  Leon Bottou
+//C-
+//C- This software is subject to, and may be distributed under, the
+//C- GNU General Public License, either version 2 of the license,
+//C- or (at your option) any later version. The license should have
+//C- accompanied the software or you may obtain a copy of the license
+//C- from the Free Software Foundation at http://www.fsf.org .
+//C-
+//C- This program is distributed in the hope that it will be useful,
+//C- but WITHOUT ANY WARRANTY; without even the implied warranty of
+//C- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//C- GNU General Public License for more details.
+//C-  ------------------------------------------------------------------
+//
+// The following code is derived from program "tiff2pdf"
+// whose copyright notice is reproduced below.
+// Changes were made to make it independent from the private
+// include file tiffiop.h.
+*/
+
 /* $Id: tiff2pdf.c,v 1.37.2.7 2009-01-01 00:10:43 bfriesen Exp $
  *
  * tiff2pdf - converts a TIFF image to a PDF document
@@ -24,7 +47,9 @@
  * OF THIS SOFTWARE.
  */
 
-#include "tif_config.h"
+#include "tiff2pdf.h"
+
+#ifdef HAVE_TIFF2PDF
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -40,17 +65,137 @@
 # include <fcntl.h>
 #endif
 
-#ifdef HAVE_IO_H
-# include <io.h>
+#ifdef HAVE_GETOPT_H
+# include <getopt.h>
+#endif
+
+#if defined(__GNUC__) || defined(HAVE_LONG_LONG_INT)
+# define uint64 unsigned long long
+#elif defined(_MSC_VER)
+# define uint64 unsigned __int64
+#else
+# define uint64 size_t
 #endif
 
-#include "tiffiop.h"
-#include "tiffio.h"
+#ifndef HAVE_GETOPT_H
+/*
+ * Copyright (c) 1987, 1993, 1994
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+static int   opterr = 1,        /* if error message should be printed */
+             optind = 1,        /* index into parent argv vector */
+             optopt,            /* character checked for validity */
+             optreset;          /* reset getopt */
+static char *optarg;            /* argument associated with option */
+
+#define	BADCH	(int)'?'
+#define	BADARG	(int)':'
+#define	EMSG	""
+
+/*
+ * getopt --
+ *	Parse argc/argv argument vector.
+ */
+static int
+getopt(int argc, char * const argv[], const char *optstring)
+{
+	static char *place = EMSG;		/* option letter processing */
+	char *oli;				/* option letter list index */
+
+	if (optreset || *place == 0) {		/* update scanning pointer */
+		optreset = 0;
+		place = argv[optind];
+		if (optind >= argc || *place++ != '-') {
+			/* Argument is absent or is not an option */
+			place = EMSG;
+			return (-1);
+		}
+		optopt = *place++;
+		if (optopt == '-' && *place == 0) {
+			/* "--" => end of options */
+			++optind;
+			place = EMSG;
+			return (-1);
+		}
+		if (optopt == 0) {
+			/* Solitary '-', treat as a '-' option
+			   if the program (eg su) is looking for it. */
+			place = EMSG;
+			if (strchr(optstring, '-') == NULL)
+				return -1;
+			optopt = '-';
+		}
+	} else
+		optopt = *place++;
 
-#ifndef HAVE_GETOPT
-extern int getopt(int, char**, char*);
+	/* See if option letter is one the caller wanted... */
+	if (optopt == ':' || (oli = strchr(optstring, optopt)) == NULL) {
+		if (*place == 0)
+			++optind;
+		if (opterr && *optstring != ':')
+			(void)fprintf(stderr,
+                                      "unknown option -- %c\n", optopt);
+		return (BADCH);
+	}
+
+	/* Does this option need an argument? */
+	if (oli[1] != ':') {
+		/* don't need argument */
+		optarg = NULL;
+		if (*place == 0)
+			++optind;
+	} else {
+		/* Option-argument is either the rest of this argument or the
+		   entire next argument. */
+		if (*place)
+			optarg = place;
+		else if (argc > ++optind)
+			optarg = argv[optind];
+		else {
+			/* option-argument absent */
+			place = EMSG;
+			if (*optstring == ':')
+				return (BADARG);
+			if (opterr)
+				(void)fprintf(stderr,
+                                        "option requires an argument -- %c\n",
+                                        optopt);
+			return (BADCH);
+		}
+		place = EMSG;
+		++optind;
+	}
+	return (optopt);			/* return option letter */
+}
 #endif
 
+
 #define TIFF2PDF_MODULE "tiff2pdf"
 
 #define PS_UNIT_SIZE	72.0F
@@ -232,8 +377,7 @@
 
 /* These functions are called by main. */
 
-void tiff2pdf_usage(void);
-int tiff2pdf_match_paper_size(float*, float*, char*);
+static int tiff2pdf_match_paper_size(float*, float*, char*);
 
 /* These functions are used to generate a PDF from a TIFF. */ 
 
@@ -241,76 +385,76 @@
 extern "C" {
 #endif
 
-T2P* t2p_init(void);
-void t2p_validate(T2P*);
-tsize_t t2p_write_pdf(T2P*, TIFF*, TIFF*);
-void t2p_free(T2P*);
+static T2P* t2p_init(void);
+static void t2p_validate(T2P*);
+static tsize_t t2p_write_pdf(T2P*, TIFF*, TIFF*);
+static void t2p_free(T2P*);
 
 #ifdef __cplusplus
 }
 #endif
 
-void t2p_read_tiff_init(T2P*, TIFF*);
-int t2p_cmp_t2p_page(const void*, const void*);
-void t2p_read_tiff_data(T2P*, TIFF*);
-void t2p_read_tiff_size(T2P*, TIFF*);
-void t2p_read_tiff_size_tile(T2P*, TIFF*, ttile_t);
-int t2p_tile_is_right_edge(T2P_TILES, ttile_t);
-int t2p_tile_is_bottom_edge(T2P_TILES, ttile_t);
-int t2p_tile_is_edge(T2P_TILES, ttile_t);
-int t2p_tile_is_corner_edge(T2P_TILES, ttile_t);
-tsize_t t2p_readwrite_pdf_image(T2P*, TIFF*, TIFF*);
-tsize_t t2p_readwrite_pdf_image_tile(T2P*, TIFF*, TIFF*, ttile_t);
+static void t2p_read_tiff_init(T2P*, TIFF*);
+static int t2p_cmp_t2p_page(const void*, const void*);
+static void t2p_read_tiff_data(T2P*, TIFF*);
+static void t2p_read_tiff_size(T2P*, TIFF*);
+static void t2p_read_tiff_size_tile(T2P*, TIFF*, ttile_t);
+static int t2p_tile_is_right_edge(T2P_TILES, ttile_t);
+static int t2p_tile_is_bottom_edge(T2P_TILES, ttile_t);
+/* static int t2p_tile_is_edge(T2P_TILES, ttile_t); */
+/* static int t2p_tile_is_corner_edge(T2P_TILES, ttile_t); */
+static tsize_t t2p_readwrite_pdf_image(T2P*, TIFF*, TIFF*);
+static tsize_t t2p_readwrite_pdf_image_tile(T2P*, TIFF*, TIFF*, ttile_t);
 #ifdef OJPEG_SUPPORT
-int t2p_process_ojpeg_tables(T2P*, TIFF*);
+static int t2p_process_ojpeg_tables(T2P*, TIFF*);
 #endif
 #ifdef JPEG_SUPPORT
-int t2p_process_jpeg_strip(unsigned char*, tsize_t*, unsigned char*, tsize_t*, tstrip_t, uint32);
+static int t2p_process_jpeg_strip(unsigned char*, tsize_t*, unsigned char*, tsize_t*, tstrip_t, uint32);
 #endif
-void t2p_tile_collapse_left(tdata_t, tsize_t, uint32, uint32, uint32);
-void t2p_write_advance_directory(T2P*, TIFF*);
-tsize_t t2p_sample_planar_separate_to_contig(T2P*, unsigned char*, unsigned char*, tsize_t);
-tsize_t t2p_sample_realize_palette(T2P*, unsigned char*);
-tsize_t t2p_sample_abgr_to_rgb(tdata_t, uint32);
-tsize_t t2p_sample_rgba_to_rgb(tdata_t, uint32);
-tsize_t t2p_sample_rgbaa_to_rgb(tdata_t, uint32);
-tsize_t t2p_sample_lab_signed_to_unsigned(tdata_t, uint32);
-tsize_t t2p_write_pdf_header(T2P*, TIFF*);
-tsize_t t2p_write_pdf_obj_start(uint32, TIFF*);
-tsize_t t2p_write_pdf_obj_end(TIFF*);
-tsize_t t2p_write_pdf_name(unsigned char*, TIFF*);
-tsize_t t2p_write_pdf_string(unsigned char*, TIFF*);
-tsize_t t2p_write_pdf_stream(tdata_t, tsize_t, TIFF*);
-tsize_t t2p_write_pdf_stream_start(TIFF*);
-tsize_t t2p_write_pdf_stream_end(TIFF*);
-tsize_t t2p_write_pdf_stream_dict(tsize_t, uint32, TIFF*);
-tsize_t t2p_write_pdf_stream_dict_start(TIFF*);
-tsize_t t2p_write_pdf_stream_dict_end(TIFF*);
-tsize_t t2p_write_pdf_stream_length(tsize_t, TIFF*);
-tsize_t t2p_write_pdf_catalog(T2P*, TIFF*);
-tsize_t t2p_write_pdf_info(T2P*, TIFF*, TIFF*);
-void t2p_pdf_currenttime(T2P*);
-void t2p_pdf_tifftime(T2P*, TIFF*);
-tsize_t t2p_write_pdf_pages(T2P*, TIFF*);
-tsize_t t2p_write_pdf_page(uint32, T2P*, TIFF*);
-void t2p_compose_pdf_page(T2P*);
-void t2p_compose_pdf_page_orient(T2P_BOX*, uint16);
-void t2p_compose_pdf_page_orient_flip(T2P_BOX*, uint16);
-tsize_t t2p_write_pdf_page_content(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_stream_dict(ttile_t, T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_cs(T2P*, TIFF*);
-tsize_t t2p_write_pdf_transfer(T2P*, TIFF*);
-tsize_t t2p_write_pdf_transfer_dict(T2P*, TIFF*, uint16);
-tsize_t t2p_write_pdf_transfer_stream(T2P*, TIFF*, uint16);
-tsize_t t2p_write_pdf_xobject_calcs(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_icccs(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_icccs_dict(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_icccs_stream(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_cs_stream(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_decode(T2P*, TIFF*);
-tsize_t t2p_write_pdf_xobject_stream_filter(ttile_t, T2P*, TIFF*);
-tsize_t t2p_write_pdf_xreftable(T2P*, TIFF*);
-tsize_t t2p_write_pdf_trailer(T2P*, TIFF*);
+static void t2p_tile_collapse_left(tdata_t, tsize_t, uint32, uint32, uint32);
+static void t2p_write_advance_directory(T2P*, TIFF*);
+static tsize_t t2p_sample_planar_separate_to_contig(T2P*, unsigned char*, unsigned char*, tsize_t);
+static tsize_t t2p_sample_realize_palette(T2P*, unsigned char*);
+static tsize_t t2p_sample_abgr_to_rgb(tdata_t, uint32);
+static tsize_t t2p_sample_rgba_to_rgb(tdata_t, uint32);
+static tsize_t t2p_sample_rgbaa_to_rgb(tdata_t, uint32);
+static tsize_t t2p_sample_lab_signed_to_unsigned(tdata_t, uint32);
+static tsize_t t2p_write_pdf_header(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_obj_start(uint32, TIFF*);
+static tsize_t t2p_write_pdf_obj_end(TIFF*);
+/* static tsize_t t2p_write_pdf_name(unsigned char*, TIFF*); */
+static tsize_t t2p_write_pdf_string(unsigned char*, TIFF*);
+static tsize_t t2p_write_pdf_stream(tdata_t, tsize_t, TIFF*);
+static tsize_t t2p_write_pdf_stream_start(TIFF*);
+static tsize_t t2p_write_pdf_stream_end(TIFF*);
+static tsize_t t2p_write_pdf_stream_dict(tsize_t, uint32, TIFF*);
+static tsize_t t2p_write_pdf_stream_dict_start(TIFF*);
+static tsize_t t2p_write_pdf_stream_dict_end(TIFF*);
+static tsize_t t2p_write_pdf_stream_length(tsize_t, TIFF*);
+static tsize_t t2p_write_pdf_catalog(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_info(T2P*, TIFF*, TIFF*);
+static void t2p_pdf_currenttime(T2P*);
+static void t2p_pdf_tifftime(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_pages(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_page(uint32, T2P*, TIFF*);
+static void t2p_compose_pdf_page(T2P*);
+static void t2p_compose_pdf_page_orient(T2P_BOX*, uint16);
+static void t2p_compose_pdf_page_orient_flip(T2P_BOX*, uint16);
+/* static tsize_t t2p_write_pdf_page_content(T2P*, TIFF*); */
+static tsize_t t2p_write_pdf_xobject_stream_dict(ttile_t, T2P*, TIFF*); 
+static tsize_t t2p_write_pdf_xobject_cs(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_transfer(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_transfer_dict(T2P*, TIFF*, uint16);
+static tsize_t t2p_write_pdf_transfer_stream(T2P*, TIFF*, uint16);
+static tsize_t t2p_write_pdf_xobject_calcs(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_xobject_icccs(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_xobject_icccs_dict(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_xobject_icccs_stream(T2P*, TIFF*);
+/* static tsize_t t2p_write_pdf_xobject_cs_stream(T2P*, TIFF*); */
+static tsize_t t2p_write_pdf_xobject_decode(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_xobject_stream_filter(ttile_t, T2P*, TIFF*);
+static tsize_t t2p_write_pdf_xreftable(T2P*, TIFF*);
+static tsize_t t2p_write_pdf_trailer(T2P*, TIFF*);
 
 static void
 t2p_disable(TIFF *tif)
@@ -563,16 +707,17 @@
     See also libtiff.3t, tiffcp.
   */
 
-int main(int argc, char** argv){
-
-	extern char *optarg;
-	extern int optind;
-	const char *outfilename = NULL;
+int
+tiff2pdf(TIFF *input, FILE *outputfile, int argc, const char **argv)
+{
+        char *outfilename = "<null>";
         T2P *t2p = NULL;
-	TIFF *input = NULL, *output = NULL;
+        TIFF *output = NULL;
 	tsize_t written = 0;
 	int c;
 
+        (void)written;
+
 	t2p = t2p_init();
 
 	if (t2p == NULL){
@@ -581,7 +726,7 @@
 	}
 
 	while (argv &&
-	       (c = getopt(argc, argv,
+	       (c = getopt(argc, (void*)argv,
 			   "o:q:u:x:y:w:l:r:p:e:c:a:t:s:k:jzndifbh")) != -1){
 		switch (c) {
 			case 'o':
@@ -690,8 +835,8 @@
 					_TIFFmalloc(strlen(optarg) + 1);
 				if(t2p->pdf_creator==NULL){
 					TIFFError(TIFF2PDF_MODULE, 
-				"Can't allocate %u bytes of memory for main", 
-						  strlen(optarg) + 1); 
+				"Can't allocate %lu bytes of memory for main", 
+						  (long)strlen(optarg) + 1); 
 					goto fail;
 				}
 				strcpy((char *)t2p->pdf_creator, optarg);
@@ -703,8 +848,8 @@
 				if(t2p->pdf_author==NULL){
 					TIFFError(
 						TIFF2PDF_MODULE, 
-				"Can't allocate %u bytes of memory for main", 
-						strlen(optarg) + 1); 
+				"Can't allocate %lu bytes of memory for main", 
+						(long)strlen(optarg) + 1); 
 					goto fail;
 				}
 				strcpy((char *)t2p->pdf_author, optarg);
@@ -716,8 +861,8 @@
 				if(t2p->pdf_title==NULL){
 					TIFFError(
 						TIFF2PDF_MODULE, 
-				"Can't allocate %u bytes of memory for main", 
-						strlen(optarg) + 1); 
+				"Can't allocate %lu bytes of memory for main", 
+						(long)strlen(optarg) + 1); 
 					goto fail;
 				}
 				strcpy((char *)t2p->pdf_title, optarg);
@@ -729,8 +874,8 @@
 				if(t2p->pdf_subject==NULL){
 					TIFFError(
 						TIFF2PDF_MODULE, 
-				"Can't allocate %u bytes of memory for main", 
-						strlen(optarg)+1); 
+				"Can't allocate %lu bytes of memory for main", 
+						(long)strlen(optarg)+1); 
 					goto fail;
 				}
 				strcpy((char *)t2p->pdf_subject, optarg);
@@ -742,8 +887,8 @@
 				if(t2p->pdf_keywords==NULL){
 					TIFFError(
 						TIFF2PDF_MODULE, 
-				"Can't allocate %u bytes of memory for main", 
-						strlen(optarg) + 1); 
+				"Can't allocate %lu bytes of memory for main", 
+						(long)strlen(optarg) + 1); 
 					goto fail;
 				}
 				strcpy((char *)t2p->pdf_keywords, optarg);
@@ -752,54 +897,14 @@
 			case 'b':
 				t2p->pdf_image_interpolate = 1;
 				break;
-			case 'h': 
-			case '?': 
-				tiff2pdf_usage();
-				goto success;
-				break;
-		}
-		}
-
-	/*
-	 * Input
-	 */
-	if(argc > optind) {
-		input = TIFFOpen(argv[optind++], "r");
-		if (input==NULL) {
-			TIFFError(TIFF2PDF_MODULE, 
-				  "Can't open input file %s for reading", 
-				  argv[optind-1]);
-			goto fail;
 		}
-	} else {
-		TIFFError(TIFF2PDF_MODULE, "No input file specified"); 
-		tiff2pdf_usage();
-		goto fail;
-	}
-
-	if(argc > optind) {
-		TIFFError(TIFF2PDF_MODULE, 
-			  "No support for multiple input files"); 
-		tiff2pdf_usage();
-		goto fail;
 	}
 
 	/*
 	 * Output
 	 */
 	t2p->outputdisable = 0;
-	if (outfilename) {
-		t2p->outputfile = fopen(outfilename, "wb");
-		if (t2p->outputfile == NULL) {
-			TIFFError(TIFF2PDF_MODULE,
-				  "Can't open output file %s for writing",
-				  outfilename);
-			goto fail;
-		}
-	} else {
-		outfilename = "-";
-		t2p->outputfile = stdout;
-	}
+        t2p->outputfile = outputfile;
 
 	output = TIFFClientOpen(outfilename, "w", (thandle_t) t2p,
 				t2p_readproc, t2p_writeproc, t2p_seekproc, 
@@ -827,7 +932,7 @@
 		goto fail;
 	}
 
-success:
+/* success: */
 	if (output != NULL)
 		TIFFClose(output);
 	if (t2p != NULL)
@@ -845,50 +950,8 @@
   
 }
 
-void tiff2pdf_usage(){
-	char* lines[]={
-	"usage:  tiff2pdf [options] input.tiff",
-	"options:",
-	" -o: output to file name",
-#ifdef JPEG_SUPPORT
-	" -j: compress with JPEG", 
-#endif
-#ifdef ZIP_SUPPORT
-	" -z: compress with Zip/Deflate",
-#endif
-	" -q: compression quality",
-	" -n: no compressed data passthrough",
-	" -d: do not compress (decompress)",
-	" -i: invert colors",
-	" -u: set distance unit, 'i' for inch, 'm' for centimeter",
-	" -x: set x resolution default in dots per unit",
-	" -y: set y resolution default in dots per unit",
-	" -w: width in units",
-	" -l: length in units",
-	" -r: 'd' for resolution default, 'o' for resolution override",
-	" -p: paper size, eg \"letter\", \"legal\", \"A4\"",
-	" -f: set PDF \"Fit Window\" user preference",
-	" -e: date, overrides image or current date/time default, YYYYMMDDHHMMSS",
-	" -c: sets document creator, overrides image software default",
-	" -a: sets document author, overrides image artist default",
-	" -t: sets document title, overrides image document name default",
-	" -s: sets document subject, overrides image image description default",
-	" -k: sets document keywords",
-	" -b: set PDF \"Interpolate\" user preference",
-	" -h: usage",
-	NULL
-	};
-	int i=0;
 
-	fprintf(stderr, "%s\n\n", TIFFGetVersion());
-	for (i=0;lines[i]!=NULL;i++){
-		fprintf(stderr, "%s\n", lines[i]);
-	}
-
-	return;
-}
-
-int tiff2pdf_match_paper_size(float* width, float* length, char* papersize){
+static int tiff2pdf_match_paper_size(float* width, float* length, char* papersize){
 
 	size_t i, len;
 	const char* sizes[]={
@@ -952,14 +1015,14 @@
 	This function allocates and initializes a T2P context struct pointer.
 */
 
-T2P* t2p_init(){
+static T2P* t2p_init(){
 
 	T2P* t2p = (T2P*) _TIFFmalloc(sizeof(T2P));
 	if(t2p==NULL){
 		TIFFError(
 			TIFF2PDF_MODULE, 
-			"Can't allocate %u bytes of memory for t2p_init", 
-			sizeof(T2P));
+			"Can't allocate %lu bytes of memory for t2p_init", 
+			(long)sizeof(T2P));
 		return( (T2P*) NULL );
 	}
 	_TIFFmemset(t2p, 0x00, sizeof(T2P));
@@ -978,7 +1041,7 @@
 	This function frees a T2P context struct pointer and any allocated data fields of it.
 */
 
-void t2p_free(T2P* t2p){
+static void t2p_free(T2P* t2p){
 
 	int i=0;
 
@@ -1037,7 +1100,7 @@
         before calling t2p_write_pdf with it.
 */
 
-void t2p_validate(T2P* t2p){
+static void t2p_validate(T2P* t2p){
 
 #ifdef JPEG_SUPPORT
 	if(t2p->pdf_defaultcompression==T2P_COMPRESS_JPEG){
@@ -1079,7 +1142,7 @@
         with the output of the PDF document as a whole.  
 */
 
-void t2p_read_tiff_init(T2P* t2p, TIFF* input){
+static void t2p_read_tiff_init(T2P* t2p, TIFF* input){
 
 	tdir_t directorycount=0;
 	tdir_t i=0;
@@ -1092,8 +1155,8 @@
 	if(t2p->tiff_pages==NULL){
 		TIFFError(
 			TIFF2PDF_MODULE, 
-			"Can't allocate %u bytes of memory for tiff_pages array, %s", 
-			directorycount * sizeof(T2P_PAGE), 
+			"Can't allocate %lu bytes of memory for tiff_pages array, %s", 
+			directorycount * (long)sizeof(T2P_PAGE), 
 			TIFFFileName(input));
 		t2p->t2p_error = T2P_ERR_ERROR;
 		return;
@@ -1103,8 +1166,8 @@
 	if(t2p->tiff_tiles==NULL){
 		TIFFError(
 			TIFF2PDF_MODULE, 
-			"Can't allocate %u bytes of memory for tiff_tiles array, %s", 
-			directorycount * sizeof(T2P_TILES), 
+			"Can't allocate %lu bytes of memory for tiff_tiles array, %s", 
+			directorycount * (long)sizeof(T2P_TILES), 
 			TIFFFileName(input));
 		t2p->t2p_error = T2P_ERR_ERROR;
 		return;
@@ -1236,8 +1299,8 @@
 			if( t2p->tiff_tiles[i].tiles_tiles == NULL){
 				TIFFError(
 					TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory for t2p_read_tiff_init, %s", 
-					t2p->tiff_tiles[i].tiles_tilecount * sizeof(T2P_TILE), 
+					"Can't allocate %lu bytes of memory for t2p_read_tiff_init, %s", 
+					t2p->tiff_tiles[i].tiles_tilecount * (long)sizeof(T2P_TILE), 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return;
@@ -1253,7 +1316,7 @@
  * by page number.
  */
 
-int t2p_cmp_t2p_page(const void* e1, const void* e2){
+static int t2p_cmp_t2p_page(const void* e1, const void* e2){
 
 	return( ((T2P_PAGE*)e1)->page_number - ((T2P_PAGE*)e2)->page_number );
 }
@@ -1270,7 +1333,7 @@
 	requiring transcoding of the image data.
 */
 
-void t2p_read_tiff_data(T2P* t2p, TIFF* input){
+static void t2p_read_tiff_data(T2P* t2p, TIFF* input){
 
 	int i=0;
 	uint16* r;
@@ -1850,7 +1913,7 @@
 	uncompressed image data from the input TIFF for a page.
 */
 
-void t2p_read_tiff_size(T2P* t2p, TIFF* input){
+static void t2p_read_tiff_size(T2P* t2p, TIFF* input){
 
 	uint32* sbc=NULL;
 #if defined(JPEG_SUPPORT) || defined (OJPEG_SUPPORT)
@@ -1891,7 +1954,7 @@
 			if(TIFFGetField(input, TIFFTAG_JPEGIFOFFSET, &(t2p->tiff_dataoffset))){
 				if(t2p->tiff_dataoffset != 0){
 					if(TIFFGetField(input, TIFFTAG_JPEGIFBYTECOUNT, &(t2p->tiff_datasize))!=0){
-						if(t2p->tiff_datasize < k) {
+                                          if((uint64)t2p->tiff_datasize < k) {
 							TIFFWarning(TIFF2PDF_MODULE, 
 								"Input file %s has short JPEG interchange file byte count", 
 								TIFFFileName(input));
@@ -1984,7 +2047,7 @@
 	uncompressed image data from the input TIFF for a tile of a page.
 */
 
-void t2p_read_tiff_size_tile(T2P* t2p, TIFF* input, ttile_t tile){
+static void t2p_read_tiff_size_tile(T2P* t2p, TIFF* input, ttile_t tile){
 
 	uint32* tbc = NULL;
 	uint16 edge=0;
@@ -2060,7 +2123,7 @@
  * and does not have full imaged tile width.
  */
 
-int t2p_tile_is_right_edge(T2P_TILES tiles, ttile_t tile){
+static int t2p_tile_is_right_edge(T2P_TILES tiles, ttile_t tile){
 
 	if( ((tile+1) % tiles.tiles_tilecountx == 0) 
 		&& (tiles.tiles_edgetilewidth != 0) ){
@@ -2075,7 +2138,7 @@
  * and does not have full imaged tile length.
  */
 
-int t2p_tile_is_bottom_edge(T2P_TILES tiles, ttile_t tile){
+static int t2p_tile_is_bottom_edge(T2P_TILES tiles, ttile_t tile){
 
 	if( ((tile+1) > (tiles.tiles_tilecount-tiles.tiles_tilecountx) )
 		&& (tiles.tiles_edgetilelength != 0) ){
@@ -2086,33 +2149,12 @@
 }
 
 /*
- * This function returns a non-zero value when the tile is a right edge tile
- * or a bottom edge tile.
- */
-
-int t2p_tile_is_edge(T2P_TILES tiles, ttile_t tile){
-
-	return(t2p_tile_is_right_edge(tiles, tile) | t2p_tile_is_bottom_edge(tiles, tile) );
-}
-
-/*
-	This function returns a non-zero value when the tile is a right edge tile and a bottom 
-	edge tile.
-*/
-
-int t2p_tile_is_corner_edge(T2P_TILES tiles, ttile_t tile){
-
-	return(t2p_tile_is_right_edge(tiles, tile) & t2p_tile_is_bottom_edge(tiles, tile) );
-}
-
-
-/*
 	This function reads the raster image data from the input TIFF for an image and writes 
 	the data to the output PDF XObject image dictionary stream.  It returns the amount written 
 	or zero on error.
 */
 
-tsize_t t2p_readwrite_pdf_image(T2P* t2p, TIFF* input, TIFF* output){
+static tsize_t t2p_readwrite_pdf_image(T2P* t2p, TIFF* input, TIFF* output){
 
 	tsize_t written=0;
 	unsigned char* buffer=NULL;
@@ -2153,8 +2195,8 @@
 				_TIFFmalloc(t2p->tiff_datasize);
 			if (buffer == NULL) {
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2182,8 +2224,8 @@
                         memset(buffer, 0, t2p->tiff_datasize);
 			if(buffer == NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2209,8 +2251,8 @@
                                 memset(buffer, 0, t2p->tiff_datasize);
 				if(buffer == NULL) {
 					TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-						t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+						(unsigned long)t2p->tiff_datasize, 
 						TIFFFileName(input));
 					t2p->t2p_error = T2P_ERR_ERROR;
 					return(0);
@@ -2285,8 +2327,8 @@
                                 memset(buffer, 0, t2p->tiff_datasize);
 				if(buffer==NULL){
 					TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-						t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+						(unsigned long)t2p->tiff_datasize, 
 						TIFFFileName(input));
 					t2p->t2p_error = T2P_ERR_ERROR;
 					return(0);
@@ -2328,8 +2370,8 @@
                         memset(buffer, 0, t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2390,8 +2432,8 @@
                 memset(buffer, 0, t2p->tiff_datasize);
 		if(buffer==NULL){
 			TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-				t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+				(unsigned long)t2p->tiff_datasize, 
 				TIFFFileName(input));
 			t2p->t2p_error = T2P_ERR_ERROR;
 			return(0);
@@ -2428,8 +2470,8 @@
                         memset(buffer, 0, t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2437,8 +2479,8 @@
 			samplebuffer = (unsigned char*) _TIFFmalloc(stripsize);
 			if(samplebuffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2477,8 +2519,8 @@
                 memset(buffer, 0, t2p->tiff_datasize);
 		if(buffer==NULL){
 			TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-				t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+				(unsigned long)t2p->tiff_datasize, 
 				TIFFFileName(input));
 			t2p->t2p_error = T2P_ERR_ERROR;
 			return(0);
@@ -2510,8 +2552,8 @@
 				t2p->tiff_datasize * t2p->tiff_samplesperpixel);
 			if(samplebuffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 			  _TIFFfree(buffer);
@@ -2540,8 +2582,8 @@
 				t2p->tiff_width*t2p->tiff_length*4);
 			if(samplebuffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-	"Can't allocate %u bytes of memory for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+	"Can't allocate %lu bytes of memory for t2p_readwrite_pdf_image, %s", 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				_TIFFfree(buffer);
@@ -2699,7 +2741,7 @@
  * for the tile.  It returns the amount written or zero on error.
  */
 
-tsize_t t2p_readwrite_pdf_image_tile(T2P* t2p, TIFF* input, TIFF* output, ttile_t tile){
+static tsize_t t2p_readwrite_pdf_image_tile(T2P* t2p, TIFF* input, TIFF* output, ttile_t tile){
 
 	uint16 edge=0;
 	tsize_t written=0;
@@ -2718,6 +2760,7 @@
 	float* xfloatp;
 	uint32 xuint32=0;
 #endif
+        (void)tilesize;
 
 	/* Fail if prior error (in particular, can't trust tiff_datasize) */
 	if (t2p->t2p_error != T2P_ERR_OK)
@@ -2737,9 +2780,9 @@
 			buffer= (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image_tile, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2758,9 +2801,9 @@
 			buffer= (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image_tile, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2787,9 +2830,9 @@
 			buffer=(unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2828,9 +2871,9 @@
 			buffer= (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image_tile, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2871,9 +2914,9 @@
 		buffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 		if(buffer==NULL){
 			TIFFError(TIFF2PDF_MODULE, 
-				"Can't allocate %u bytes of memory for "
+				"Can't allocate %lu bytes of memory for "
                                 "t2p_readwrite_pdf_image_tile, %s", 
-				t2p->tiff_datasize, 
+				(unsigned long)t2p->tiff_datasize, 
 				TIFFFileName(input));
 			t2p->t2p_error = T2P_ERR_ERROR;
 			return(0);
@@ -2904,9 +2947,9 @@
 			buffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image_tile, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2914,9 +2957,9 @@
 			samplebuffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(samplebuffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image_tile, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -2953,9 +2996,9 @@
 			buffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);
 			if(buffer==NULL){
 				TIFFError(TIFF2PDF_MODULE, 
-					"Can't allocate %u bytes of memory "
+					"Can't allocate %lu bytes of memory "
                                         "for t2p_readwrite_pdf_image_tile, %s", 
-					t2p->tiff_datasize, 
+					(unsigned long)t2p->tiff_datasize, 
 					TIFFFileName(input));
 				t2p->t2p_error = T2P_ERR_ERROR;
 				return(0);
@@ -3140,7 +3183,7 @@
 }
 
 #ifdef OJPEG_SUPPORT
-int t2p_process_ojpeg_tables(T2P* t2p, TIFF* input){
+static int t2p_process_ojpeg_tables(T2P* t2p, TIFF* input){
 	uint16 proc=0;
 	void* q;
 	uint32 q_length=0;
@@ -3384,7 +3427,7 @@
 #endif
 
 #ifdef JPEG_SUPPORT
-int t2p_process_jpeg_strip(
+static int t2p_process_jpeg_strip(
 	unsigned char* strip, 
 	tsize_t* striplength, 
 	unsigned char* buffer, 
@@ -3477,7 +3520,7 @@
 	This functions converts a tilewidth x tilelength buffer of samples into an edgetilewidth x 
 	tilelength buffer of samples.
 */
-void t2p_tile_collapse_left(
+static void t2p_tile_collapse_left(
 	tdata_t buffer, 
 	tsize_t scanwidth, 
 	uint32 tilewidth, 
@@ -3488,7 +3531,7 @@
 	tsize_t edgescanwidth=0;
 	
 	edgescanwidth = (scanwidth * edgetilewidth + (tilewidth - 1))/ tilewidth;
-	for(i=i;i<tilelength;i++){
+	for(i=0;i<tilelength;i++){
 		_TIFFmemcpy( 
 			&(((char*)buffer)[edgescanwidth*i]), 
 			&(((char*)buffer)[scanwidth*i]), 
@@ -3505,7 +3548,7 @@
  * implementations, then it replaces the original implementations.
  */
 
-void
+static void
 t2p_write_advance_directory(T2P* t2p, TIFF* output)
 {
 	t2p_disable(output);
@@ -3520,8 +3563,7 @@
 	return;
 }
 
-tsize_t t2p_sample_planar_separate_to_contig(
-											T2P* t2p, 
+static tsize_t t2p_sample_planar_separate_to_contig(T2P* t2p, 
                                                     unsigned char* buffer, 
                                                     unsigned char* samplebuffer, 
                                                     tsize_t samplebuffersize){
@@ -3540,7 +3582,7 @@
 	return(samplebuffersize);
 }
 
-tsize_t t2p_sample_realize_palette(T2P* t2p, unsigned char* buffer){
+static tsize_t t2p_sample_realize_palette(T2P* t2p, unsigned char* buffer){
 
 	uint32 sample_count=0;
 	uint16 component_count=0;
@@ -3567,7 +3609,7 @@
 	into RGB interleaved data, discarding A.
 */
 
-tsize_t t2p_sample_abgr_to_rgb(tdata_t data, uint32 samplecount)
+static tsize_t t2p_sample_abgr_to_rgb(tdata_t data, uint32 samplecount)
 {
 	uint32 i=0;
 	uint32 sample=0;
@@ -3587,7 +3629,7 @@
  * into RGB interleaved data, discarding A.
  */
 
-tsize_t
+static tsize_t
 t2p_sample_rgbaa_to_rgb(tdata_t data, uint32 samplecount)
 {
 	uint32 i;
@@ -3603,7 +3645,7 @@
  * into RGB interleaved data, adding 255-A to each component sample.
  */
 
-tsize_t
+static tsize_t
 t2p_sample_rgba_to_rgb(tdata_t data, uint32 samplecount)
 {
 	uint32 i = 0;
@@ -3627,7 +3669,7 @@
 	to unsigned.
 */
 
-tsize_t t2p_sample_lab_signed_to_unsigned(tdata_t buffer, uint32 samplecount){
+static tsize_t t2p_sample_lab_signed_to_unsigned(tdata_t buffer, uint32 samplecount){
 
 	uint32 i=0;
 
@@ -3653,7 +3695,7 @@
 	This function writes the PDF header to output.
 */
 
-tsize_t t2p_write_pdf_header(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_header(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -3670,7 +3712,7 @@
 	This function writes the beginning of a PDF object to output.
 */
 
-tsize_t t2p_write_pdf_obj_start(uint32 number, TIFF* output){
+static tsize_t t2p_write_pdf_obj_start(uint32 number, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -3687,7 +3729,7 @@
 	This function writes the end of a PDF object to output.
 */
 
-tsize_t t2p_write_pdf_obj_end(TIFF* output){
+static tsize_t t2p_write_pdf_obj_end(TIFF* output){
 
 	tsize_t written=0;
 
@@ -3697,108 +3739,10 @@
 }
 
 /*
-	This function writes a PDF name object to output.
-*/
-
-tsize_t t2p_write_pdf_name(unsigned char* name, TIFF* output){
-
-	tsize_t written=0;
-	uint32 i=0;
-	char buffer[64];
-	uint16 nextchar=0;
-	uint32 namelen=0;
-	
-	namelen = strlen((char *)name);
-	if (namelen>126) {
-		namelen=126;
-	}
-	written += t2pWriteFile(output, (tdata_t) "/", 1);
-	for (i=0;i<namelen;i++){
-		if ( ((unsigned char)name[i]) < 0x21){
-			sprintf(buffer, "#%.2X", name[i]);
-			buffer[sizeof(buffer) - 1] = '\0';
-			written += t2pWriteFile(output, (tdata_t) buffer, 3);
-			nextchar=1;
-		}
-		if ( ((unsigned char)name[i]) > 0x7E){
-			sprintf(buffer, "#%.2X", name[i]);
-			buffer[sizeof(buffer) - 1] = '\0';
-			written += t2pWriteFile(output, (tdata_t) buffer, 3);
-			nextchar=1;
-		}
-		if (nextchar==0){
-			switch (name[i]){
-				case 0x23:
-					sprintf(buffer, "#%.2X", name[i]);
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x25:
-					sprintf(buffer, "#%.2X", name[i]);
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x28:
-					sprintf(buffer, "#%.2X", name[i]);
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x29:
-					sprintf(buffer, "#%.2X", name[i]); 
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x2F:
-					sprintf(buffer, "#%.2X", name[i]); 
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x3C:
-					sprintf(buffer, "#%.2X", name[i]); 
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x3E:
-					sprintf(buffer, "#%.2X", name[i]);
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x5B:
-					sprintf(buffer, "#%.2X", name[i]); 
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x5D:
-					sprintf(buffer, "#%.2X", name[i]);
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x7B:
-					sprintf(buffer, "#%.2X", name[i]); 
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				case 0x7D:
-					sprintf(buffer, "#%.2X", name[i]); 
-					buffer[sizeof(buffer) - 1] = '\0';
-					written += t2pWriteFile(output, (tdata_t) buffer, 3);
-					break;
-				default:
-					written += t2pWriteFile(output, (tdata_t) &name[i], 1);
-			}
-		}
-		nextchar=0;
-	}
-	written += t2pWriteFile(output, (tdata_t) " ", 1);
-
-	return(written);
-}
-
-/*
 	This function writes a PDF string object to output.
 */
 	
-tsize_t t2p_write_pdf_string(unsigned char* pdfstr, TIFF* output){
+static tsize_t t2p_write_pdf_string(unsigned char* pdfstr, TIFF* output){
 
 	tsize_t written = 0;
 	uint32 i = 0;
@@ -3853,7 +3797,7 @@
 	This function writes a buffer of data to output.
 */
 
-tsize_t t2p_write_pdf_stream(tdata_t buffer, tsize_t len, TIFF* output){
+static tsize_t t2p_write_pdf_stream(tdata_t buffer, tsize_t len, TIFF* output){
 
 	tsize_t written=0;
 
@@ -3866,7 +3810,7 @@
 	This functions writes the beginning of a PDF stream to output.
 */
 
-tsize_t t2p_write_pdf_stream_start(TIFF* output){
+static tsize_t t2p_write_pdf_stream_start(TIFF* output){
 
 	tsize_t written=0;
 
@@ -3879,7 +3823,7 @@
 	This function writes the end of a PDF stream to output. 
 */
 
-tsize_t t2p_write_pdf_stream_end(TIFF* output){
+static tsize_t t2p_write_pdf_stream_end(TIFF* output){
 
 	tsize_t written=0;
 
@@ -3892,7 +3836,7 @@
 	This function writes a stream dictionary for a PDF stream to output.
 */
 
-tsize_t t2p_write_pdf_stream_dict(tsize_t len, uint32 number, TIFF* output){
+static tsize_t t2p_write_pdf_stream_dict(tsize_t len, uint32 number, TIFF* output){
 	
 	tsize_t written=0;
 	char buffer[16];
@@ -3914,7 +3858,7 @@
 	This functions writes the beginning of a PDF stream dictionary to output.
 */
 
-tsize_t t2p_write_pdf_stream_dict_start(TIFF* output){
+static tsize_t t2p_write_pdf_stream_dict_start(TIFF* output){
 
 	tsize_t written=0;
 
@@ -3927,7 +3871,7 @@
 	This function writes the end of a PDF stream dictionary to output. 
 */
 
-tsize_t t2p_write_pdf_stream_dict_end(TIFF* output){
+static tsize_t t2p_write_pdf_stream_dict_end(TIFF* output){
 
 	tsize_t written=0;
 
@@ -3940,7 +3884,7 @@
 	This function writes a number to output.
 */
 
-tsize_t t2p_write_pdf_stream_length(tsize_t len, TIFF* output){
+static tsize_t t2p_write_pdf_stream_length(tsize_t len, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -3957,7 +3901,7 @@
 	This function writes the PDF Catalog structure to output.
 */
 
-tsize_t t2p_write_pdf_catalog(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_catalog(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -3983,13 +3927,15 @@
 	This function writes the PDF Info structure to output.
 */
 
-tsize_t t2p_write_pdf_info(T2P* t2p, TIFF* input, TIFF* output){
+static tsize_t t2p_write_pdf_info(T2P* t2p, TIFF* input, TIFF* output){
 
 	tsize_t written = 0;
 	unsigned char* info;
 	char buffer[512];
 	int buflen = 0;
 
+        (void) buflen;
+
 	if(t2p->pdf_datetime==NULL){
 		t2p_pdf_tifftime(t2p, input);
 	}
@@ -4107,7 +4053,7 @@
  * date string, it is called by t2p_pdf_tifftime.
  */
 
-void t2p_pdf_currenttime(T2P* t2p)
+static void t2p_pdf_currenttime(T2P* t2p)
 {
 
 	struct tm* currenttime;
@@ -4131,7 +4077,7 @@
  * TIFF file if it exists or the current time as a PDF date string.
  */
 
-void t2p_pdf_tifftime(T2P* t2p, TIFF* input){
+static void t2p_pdf_tifftime(T2P* t2p, TIFF* input){
 
 	char* datetime;
 
@@ -4172,7 +4118,7 @@
  * This function writes a PDF Pages Tree structure to output.
  */
 
-tsize_t t2p_write_pdf_pages(T2P* t2p, TIFF* output)
+static tsize_t t2p_write_pdf_pages(T2P* t2p, TIFF* output)
 {
 	tsize_t written=0;
 	tdir_t i=0;
@@ -4211,7 +4157,7 @@
 	This function writes a PDF Page structure to output.
 */
 
-tsize_t t2p_write_pdf_page(uint32 object, T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_page(uint32 object, T2P* t2p, TIFF* output){
 
 	unsigned int i=0;
 	tsize_t written=0;
@@ -4306,7 +4252,7 @@
 	This function composes the page size and image and tile locations on a page.
 */
 
-void t2p_compose_pdf_page(T2P* t2p){
+static void t2p_compose_pdf_page(T2P* t2p){
 
 	uint32 i=0;
 	uint32 i2=0;
@@ -4493,7 +4439,7 @@
 	return;
 }
 
-void t2p_compose_pdf_page_orient(T2P_BOX* boxp, uint16 orientation){
+static void t2p_compose_pdf_page_orient(T2P_BOX* boxp, uint16 orientation){
 
 	float m1[9];
 	float f=0.0;
@@ -4568,7 +4514,7 @@
 	return;
 }
 
-void t2p_compose_pdf_page_orient_flip(T2P_BOX* boxp, uint16 orientation){
+static void t2p_compose_pdf_page_orient_flip(T2P_BOX* boxp, uint16 orientation){
 
 	float m1[9];
 	float f=0.0;
@@ -4630,7 +4576,7 @@
 	This function writes a PDF Contents stream to output.
 */
 
-tsize_t t2p_write_pdf_page_content_stream(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_page_content_stream(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	ttile_t i=0;
@@ -4676,7 +4622,7 @@
 	This function writes a PDF Image XObject stream dictionary to output. 
 */
 
-tsize_t t2p_write_pdf_xobject_stream_dict(ttile_t tile, 
+static tsize_t t2p_write_pdf_xobject_stream_dict(ttile_t tile, 
                                                  T2P* t2p, 
                                                  TIFF* output){
 
@@ -4758,7 +4704,7 @@
  */
 
 
-tsize_t t2p_write_pdf_xobject_cs(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_cs(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[128];
@@ -4839,7 +4785,7 @@
 	return(written);
 }
 
-tsize_t t2p_write_pdf_transfer(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_transfer(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -4873,7 +4819,7 @@
 	return(written);
 }
 
-tsize_t t2p_write_pdf_transfer_dict(T2P* t2p, TIFF* output, uint16 i){
+static tsize_t t2p_write_pdf_transfer_dict(T2P* t2p, TIFF* output, uint16 i){
 
 	tsize_t written=0;
 	char buffer[32];
@@ -4891,7 +4837,7 @@
 	return(written);
 }
 
-tsize_t t2p_write_pdf_transfer_stream(T2P* t2p, TIFF* output, uint16 i){
+static tsize_t t2p_write_pdf_transfer_stream(T2P* t2p, TIFF* output, uint16 i){
 
 	tsize_t written=0;
 
@@ -4907,7 +4853,7 @@
 	This function writes a PDF Image XObject Colorspace array to output.
 */
 
-tsize_t t2p_write_pdf_xobject_calcs(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_calcs(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[128];
@@ -5003,7 +4949,7 @@
 	This function writes a PDF Image XObject Colorspace array to output.
 */
 
-tsize_t t2p_write_pdf_xobject_icccs(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_icccs(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -5017,7 +4963,7 @@
 	return(written);
 }
 
-tsize_t t2p_write_pdf_xobject_icccs_dict(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_icccs_dict(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -5035,7 +4981,7 @@
 	return(written);
 }
 
-tsize_t t2p_write_pdf_xobject_icccs_stream(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_icccs_stream(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 
@@ -5051,7 +4997,7 @@
 	This function writes a palette stream for an indexed color space to output.
 */
 
-tsize_t t2p_write_pdf_xobject_palettecs_stream(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_palettecs_stream(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 
@@ -5067,7 +5013,7 @@
 	This function writes a PDF Image XObject Decode array to output.
 */
 
-tsize_t t2p_write_pdf_xobject_decode(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_decode(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	int i=0;
@@ -5086,7 +5032,7 @@
 	output.
 */
 
-tsize_t t2p_write_pdf_xobject_stream_filter(ttile_t tile, T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xobject_stream_filter(ttile_t tile, T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[16];
@@ -5196,7 +5142,7 @@
 	This function writes a PDF xref table to output.
 */
 
-tsize_t t2p_write_pdf_xreftable(T2P* t2p, TIFF* output){
+static tsize_t t2p_write_pdf_xreftable(T2P* t2p, TIFF* output){
 
 	tsize_t written=0;
 	char buffer[21];
@@ -5220,7 +5166,7 @@
  * This function writes a PDF trailer to output.
  */
 
-tsize_t t2p_write_pdf_trailer(T2P* t2p, TIFF* output)
+static tsize_t t2p_write_pdf_trailer(T2P* t2p, TIFF* output)
 {
 
 	tsize_t written = 0;
@@ -5229,10 +5175,9 @@
 	char fileidbuf[16];
 	int i = 0;
 
-	((int*)fileidbuf)[0] = rand();
-	((int*)fileidbuf)[1] = rand();
-	((int*)fileidbuf)[2] = rand();
-	((int*)fileidbuf)[3] = rand();
+        for (i=0; i<(int)sizeof(fileidbuf); i++)
+          fileidbuf[i] = (char) rand();
+
 	t2p->pdf_fileid = (unsigned char*)_TIFFmalloc(33);
 	if(t2p->pdf_fileid == NULL) {
 		TIFFError(
@@ -5312,7 +5257,7 @@
   and TIFFClose on output.
 */
 
-tsize_t t2p_write_pdf(T2P* t2p, TIFF* input, TIFF* output){
+static tsize_t t2p_write_pdf(T2P* t2p, TIFF* input, TIFF* output){
 
 	tsize_t written=0;
 	ttile_t i2=0;
@@ -5325,8 +5270,8 @@
 	if(t2p->pdf_xrefoffsets==NULL){
 		TIFFError(
 			TIFF2PDF_MODULE, 
-			"Can't allocate %u bytes of memory for t2p_write_pdf", 
-			t2p->pdf_xrefcount * sizeof(uint32) );
+			"Can't allocate %lu bytes of memory for t2p_write_pdf", 
+			t2p->pdf_xrefcount * (long)sizeof(uint32) );
 		return(written);
 	}
 	t2p->pdf_xrefcount=0;
@@ -5475,3 +5420,5 @@
 }
 
 /* vim: set ts=8 sts=8 sw=8 noet: */
+
+#endif
